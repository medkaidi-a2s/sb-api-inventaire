package dz.a2s.a2spreparation.repositories.views;

import dz.a2s.a2spreparation.entities.keys.VenteZoneId;
import dz.a2s.a2spreparation.entities.views.Commande;
import dz.a2s.a2spreparation.entities.views.CommandeZone;
import dz.a2s.a2spreparation.entities.views.PrpCdeZone;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.jpa.repository.query.Procedure;
import org.springframework.data.repository.query.Param;

import java.util.List;

public interface CommandeZoneRepository extends JpaRepository<CommandeZone, VenteZoneId> {

//    @Query(value = """
//                SELECT *
//                FROM PRP_LISTE_CDE_ZONES_GLOB
//                WHERE VNT_CMP_ID = :companyId
//                  AND VBZ_ZONE = :zone
//                  AND (:date IS NULL OR TRUNC(VNT_DATE) = TO_DATE(:date, 'yyyy-MM-dd'))
//                  AND (
//                      VBZ_STATUT_PREPARE IS NULL OR VBZ_STATUT_PREPARE IN (0, 1, 2, 3)
//                  )
//                  AND (
//                    (VBZ_STATUT_PREPARE = 0  OR VBZ_STATUT_PREPARE IS NULL)
//                    OR (VBZ_STATUT_PREPARE > 0 AND VBZ_PREPAR_ID = :preparId)
//                  )
//            """, nativeQuery = true)
    @Query(value = """
                SELECT *
                  FROM PRP_LISTE_CDE_ZONES_GLOB T
                 WHERE EXISTS
                 (SELECT 'X'
                          FROM STP_TIERS_ZONES X
                         WHERE X.TRZ_CMP_ID = T.VNT_CMP_ID
                           AND X.TRZ_ZNS_ID = T.VBZ_ZONE
                           AND X.TRZ_TER_ID = :preparId
                           AND X.TRZ_TER_TYPE = 4)
                   AND (VNT_CMP_ID = :companyId)
                   AND (:date IS NULL OR
                       TRUNC(VNT_DATE) = TO_DATE(:date, 'yyyy-MM-dd'))
                   /*AND (VBZ_STATUT_PREPARE IS NULL OR VBZ_STATUT_PREPARE IN (0, 1, 2, 3))*/
                   AND ((VBZ_STATUT_PREPARE = 0 OR VBZ_STATUT_PREPARE IS NULL) OR
                       (VBZ_STATUT_PREPARE > 0 AND VBZ_PREPAR_ID = :preparId))
            """, nativeQuery = true)
    List<CommandeZone> getListCmdZones(@Param("companyId") Integer companyId, @Param("preparId") Integer preparId, @Param("date") String date);

    @Query(value = """
                select count(*) from PRP_LISTE_CDE_ZONES_GLOB t
                where t.VNT_CMP_ID = :V_VBZ_CMP_ID
                  and t.VNT_ID = :V_VBZ_VNT_ID
                  and t.VNT_TYPE = :V_VBZ_VNT_TYPE
                  and t.VNT_STK_CODE = :V_VBZ_STK_CODE
                  and t.VBZ_ZONE = :V_VBZ_ZONE
                  and t.VBZ_PREPAR_ID <> :V_VBZ_PREPAR_ID
                  and t.vbz_statut_prepare = 2
            """, nativeQuery = true)
    Integer isPreparationStartedByOther(@Param("V_VBZ_CMP_ID") int v_vbz_cmp_id, @Param("V_VBZ_VNT_ID") int v_vbz_vnt_id, @Param("V_VBZ_VNT_TYPE") String v_vbz_vnt_type, @Param("V_VBZ_STK_CODE") String v_vbz_stk_code, @Param("V_VBZ_ZONE") int v_vbz_zone, @Param("V_VBZ_PREPAR_ID") int v_vbz_prepar_id);

    @Procedure(procedureName = "logistiques.P_EDIT_START_PREPAR_ZONE", outputParameterName = "p_msg")
    Integer startPrepareZone(@Param("V_VBZ_CMP_ID") int v_vbz_cmp_id, @Param("V_VBZ_VNT_ID") int v_vbz_vnt_id, @Param("V_VBZ_VNT_TYPE") String v_vbz_vnt_type, @Param("V_VBZ_STK_CODE") String v_vbz_stk_code, @Param("V_VBZ_ZONE") int v_vbz_zone, @Param("V_VBZ_PREPAR_ID") int v_vbz_prepar_id);

    //    @Query(value = """
//                SELECT *
//                FROM PRP_LISTE_CDE_ZONE_CONTROLES
//                WHERE VNT_CMP_ID = :companyId
//                  AND VBZ_ZONE = :zone
//                  AND (:date IS NULL OR TRUNC(VNT_DATE) = TO_DATE(:date, 'yyyy-MM-dd'))
//                  AND VBZ_STATUT_PREPARE = 3
//                  OR (VBZ_STATUT_PREPARE > 3 AND VBZ_VERIF_ID = :utilisateurId)
//            """, nativeQuery = true)
//    @Query(value = """
//            SELECT *
//            FROM PRP_LISTE_CDE_ZONE_CONTROLES
//            WHERE VNT_CMP_ID = :companyId
//              AND VBZ_ZONE = :zone
//              AND (:date IS NULL OR TRUNC(VNT_DATE) = TO_DATE(:date, 'yyyy-MM-dd'))
//              AND (VBZ_STATUT_PREPARE = 3 OR (VBZ_STATUT_PREPARE > 3 AND VBZ_VERIF_ID = :utilisateurId))
//            """, nativeQuery = true)
    @Query(value= """
                SELECT *
                  FROM PRP_LISTE_CDE_ZONE_CONTROLES T
                 WHERE EXISTS (SELECT 'X'
                          FROM STP_TIERS_ZONES X
                         WHERE X.TRZ_CMP_ID = T.VNT_CMP_ID
                           AND X.TRZ_ZNS_ID = T.VBZ_ZONE
                           AND X.TRZ_TER_ID = :utilisateurId
                           AND X.TRZ_TER_TYPE = 5)
                   AND VNT_CMP_ID = :companyId
                   AND (:date IS NULL OR
                       TRUNC(VNT_DATE) = TO_DATE(:date, 'yyyy-MM-dd'))
                   AND (VBZ_STATUT_PREPARE = 3 OR
                       (VBZ_STATUT_PREPARE > 3 AND VBZ_VERIF_ID = :utilisateurId))
            
            """, nativeQuery = true)
    List<CommandeZone> getPreparedCommandesZone(@Param("companyId") Integer companyId, @Param("utilisateurId") Integer utilisateurId, @Param("date") String date);

    @Procedure(procedureName = "logistiques.P_VALIDE_CDE_PREPARE_ZONE", outputParameterName = "p_msg")
    Integer setCommandeZonePrepared(@Param("P_CMP") Integer cmpId, @Param("P_VNT") Integer id, @Param("P_TYPE") String type, @Param("P_STK") String stkCode, @Param("P_ZONE") Integer zone, @Param("P_USER") String user);

    @Query(value = """
            select count(*) from PRP_LISTE_CDE_ZONES_GLOB t\s
            where t.VNT_CMP_ID = :V_VBZ_CMP_ID
              and t.VNT_ID = :V_VBZ_VNT_ID
              and t.VNT_TYPE = :V_VBZ_VNT_TYPE
              and t.VNT_STK_CODE = :V_VBZ_STK_CODE
              and t.VBZ_ZONE = :V_VBZ_ZONE
              and t.VBZ_VERIF_ID <> :V_VBZ_VERIF_ID
              and t.vbz_statut_prepare = 4
            """, nativeQuery = true)
    Integer isControlStartedByOther(@Param("V_VBZ_CMP_ID") int v_vbz_cmp_id, @Param("V_VBZ_VNT_ID") int v_vbz_vnt_id, @Param("V_VBZ_VNT_TYPE") String v_vbz_vnt_type, @Param("V_VBZ_STK_CODE") String v_vbz_stk_code, @Param("V_VBZ_ZONE") int v_vbz_zone, @Param("V_VBZ_VERIF_ID") int v_vbz_verif_id);

    @Procedure(procedureName = "logistiques.P_EDIT_START_CONTROL_ZONE", outputParameterName = "p_msg")
    Integer startControleZone(@Param("V_VBZ_CMP_ID") int v_vbz_cmp_id, @Param("V_VBZ_VNT_ID") int v_vbz_vnt_id, @Param("V_VBZ_VNT_TYPE") String v_vbz_vnt_type, @Param("V_VBZ_STK_CODE") String v_vbz_stk_code, @Param("V_VBZ_ZONE") int v_vbz_zone, @Param("V_VBZ_VERIF_ID") int v_vbz_verif_id);

    @Procedure(procedureName = "logistiques.P_SET_ZONE_CONTROLLED", outputParameterName = "p_msg")
    Integer setCommandeZoneControlled(@Param("P_CMP") Integer cmpId, @Param("P_VNT") Integer id, @Param("P_TYPE") String type, @Param("P_STK") String stkCode, @Param("P_ZONE") Integer zone, @Param("P_USER") String username);

}
